---
kind: Template
apiVersion: v1
metadata:
  name: cass-api-postgres
  annotations:
    openshift.io/display-name: CASS API + PostGres
    description: CASS Api ontop of Postgresql
    iconClass: icon-postgresql
    tags: database,postgresql
message: |-
  The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.

         Username: ${POSTGRESQL_USER}
         Password: ${POSTGRESQL_PASSWORD}
    Database Name: ${POSTGRESQL_DATABASE}
   Connection URL: postgresql://${DATABASE_SERVICE_NAME}:5432/

  For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/.
labels:
  template: cass-api-template
objects:

  - kind: NetworkSecurityPolicy
    apiVersion: secops.pathfinder.gov.bc.ca/v1alpha1
    metadata:
      name: ${API_SERVICE_NAME}
      labels:
        name: "${API_SERVICE_NAME}"
        app: ${APP_NAME}
        env: ${API_IMAGE_TAG}
    spec:
      description: |
        Allow the api to talk to the database pod.
        There is no NetworkSecurityPolicy defined for the database because we don't want it to be able
        to establish communication to any other pod.
      source:
        - - app=${APP_NAME}
        - - env=${API_IMAGE_TAG}
        - - role=${API_SERVICE_ROLE}
      destination:
        - - app=${APP_NAME}
        - - env=${API_IMAGE_TAG}
        - - role=${DATABASE_SERVICE_ROLE}

  - kind: Secret
    apiVersion: v1
    metadata:
      name: "${API_SERVICE_NAME}"
      labels:
        name: "${API_SERVICE_NAME}"
        app: ${APP_NAME}
        role: ${API_SERVICE_ROLE}
        env: ${API_IMAGE_TAG}
      annotations:
        template.openshift.io/expose-user: "{.data['api-user']}"
        template.openshift.io/expose-password: "{.data['api-password']}"
        template.openshift.io/expose-jwt-secret: "{.data['api-jwt-secret']}"
    stringData:
      api-user: "${API_DATABASE_USER}"
      api-password: "${API_DATABASE_PASS}"
      api-jwt-secret: "${API_JWT_SECRET}"

  - kind: Service
    apiVersion: v1
    metadata:
      name: "${API_SERVICE_NAME}"
      labels:
        name: "${API_SERVICE_NAME}"
        app: ${APP_NAME}
        role: ${API_SERVICE_ROLE}
        env: ${API_IMAGE_TAG}
    spec:
      ports:
        - name: api-port
          protocol: TCP
          port: 8080
          targetPort: 8080
      selector:
        name: "${API_SERVICE_NAME}"
      type: ClusterIP
      sessionAffinity: None
    status:
      loadBalancer: {}

  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${API_SERVICE_NAME}"
      labels:
        name: "${API_SERVICE_NAME}"
        app: ${APP_NAME}
        role: ${API_SERVICE_ROLE}
        env: ${API_IMAGE_TAG}
      generation: 1
    spec:
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
          mid:
            failurePolicy: Abort
            execNewPod:
              command:
                - "/opt/app-root/src/database/migrate-db.sh"
              env:
                - name: LIQUIBASE_CONTEXTS
                  value: "${API_DATA_CONTEXTS}"
                - name: PG_DATABASE
                  value: "${POSTGRESQL_DATABASE}"
                - name: PG_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "${DATABASE_SERVICE_NAME}"
                      key: database-admin-password
                - name: PG_USER
                  valueFrom:
                    secretKeyRef:
                      name: "${API_SERVICE_NAME}"
                      key: api-user
                - name: PG_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "${API_SERVICE_NAME}"
                      key: api-password
                - name: PG_DEFAULT_SCHEMA
                  value: "${DATABASE_DEFAULT_SCHEMA}"
                - name: API_DATABASE_SCHEMA
                  value: "${API_DATABASE_SCHEMA}"
                - name: POSTGRES_EXT_SCHEMA
                  value: "${DATABASE_EXTENSIONS_SCHEMA}"
              containerName: "${API_SERVICE_NAME}"
        resources:
          limits:
            memory: "${API_MEMORY_LIMIT}"
            cpu: "${API_CPU_LIMIT}"
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - "${API_SERVICE_NAME}"
            from:
              kind: ImageStreamTag
              name: "${API_IMAGE_STREAM}:${API_IMAGE_TAG}"
              namespace: "${API_IMAGE_NAMESPACE}"
        - type: ConfigChange
      replicas: 1
      selector:
        name: "${API_SERVICE_NAME}"
      template:
        metadata:
          labels:
            name: "${API_SERVICE_NAME}"
            app: ${APP_NAME}
            role: ${API_SERVICE_ROLE}
            env: ${API_IMAGE_TAG}
        spec:
          containers:
            - name: "${API_SERVICE_NAME}"
              image: " "
              ports:
                - containerPort: 8080
                  protocol: TCP
              env:
                - name: API_DATABASE_SCHEMA
                  value: "${API_DATABASE_SCHEMA}"
                - name: PGHOST
                  value: "${DATABASE_SERVICE_NAME}"
                - name: PGUSER
                  valueFrom:
                    secretKeyRef:
                      name: "${API_SERVICE_NAME}"
                      key: api-user
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "${API_SERVICE_NAME}"
                      key: api-password
                - name: JWT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: "${API_SERVICE_NAME}"
                      key: api-jwt-secret
                - name: PGDATABASE
                  valueFrom:
                    secretKeyRef:
                      name: "${DATABASE_SERVICE_NAME}"
                      key: database-name
                - name: POSTGRES_EXT_SCHEMA
                  value: "${DATABASE_EXTENSIONS_SCHEMA}"
              resources:
                limits:
                  memory: "${API_MEMORY_LIMIT}"
                  cpu: "${API_CPU_LIMIT}"
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: "/api/status"
                  port: 8080
                  scheme: HTTP
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: "/api/status"
                  port: 8080
                  scheme: HTTP
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
    status: {}

  - kind: Secret
    apiVersion: v1
    metadata:
      name: "${DATABASE_SERVICE_NAME}"
      labels:
        name: "${DATABASE_SERVICE_NAME}"
        app: ${APP_NAME}
        role: ${DATABASE_SERVICE_ROLE}
        env: ${API_IMAGE_TAG}
      annotations:
        template.openshift.io/expose-username: "{.data['database-user']}"
        template.openshift.io/expose-password: "{.data['database-password']}"
        template.openshift.io/expose-admin-password: "{.data['database-admin-password']}"
        template.openshift.io/expose-database_name: "{.data['database-name']}"
    stringData:
      database-user: "${POSTGRESQL_USER}"
      database-password: "${POSTGRESQL_PASSWORD}"
      database-admin-password: "${POSTGRESQL_ADMIN_PASSWORD}"
      database-name: "${POSTGRESQL_DATABASE}"

  - kind: Service
    apiVersion: v1
    metadata:
      name: "${DATABASE_SERVICE_NAME}"
      labels:
        name: "${DATABASE_SERVICE_NAME}"
        app: ${APP_NAME}
        role: ${DATABASE_SERVICE_ROLE}
        env: ${API_IMAGE_TAG}
      annotations:
        template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    spec:
      ports:
        - name: postgresql
          protocol: TCP
          port: 5432
          targetPort: 5432
          nodePort: 0
      selector:
        name: "${DATABASE_SERVICE_NAME}"
      type: ClusterIP
      sessionAffinity: None
    status:
      loadBalancer: {}

  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: "${DATABASE_SERVICE_NAME}"
      labels:
        name: "${DATABASE_SERVICE_NAME}"
        app: ${APP_NAME}
        role: ${DATABASE_SERVICE_ROLE}
        env: ${API_IMAGE_TAG}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "${VOLUME_CAPACITY}"

  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${DATABASE_SERVICE_NAME}"
      labels:
        name: "${DATABASE_SERVICE_NAME}"
        app: ${APP_NAME}
        role: ${DATABASE_SERVICE_ROLE}
        env: ${API_IMAGE_TAG}
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - postgresql
            from:
              kind: ImageStreamTag
              name: postgresql:${POSTGRESQL_VERSION}
              namespace: "${DATABASE_IMAGE_NAMESPACE}"
            lastTriggeredImage: ""
        - type: ConfigChange
      replicas: 1
      selector:
        name: "${DATABASE_SERVICE_NAME}"
      template:
        metadata:
          name: "${DATABASE_SERVICE_NAME}"
          labels:
            name: "${DATABASE_SERVICE_NAME}"
            app: ${APP_NAME}
            role: ${DATABASE_SERVICE_ROLE}
            env: ${API_IMAGE_TAG}
        spec:
          containers:
            - name: postgresql
              image: " "
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 5
                exec:
                  command:
                    - "/bin/sh"
                    - "-i"
                    - "-c"
                    - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                      'SELECT 1'
              livenessProbe:
                exec:
                  command:
                    - "/bin/sh"
                    - "-i"
                    - "-c"
                    - pg_isready -h 127.0.0.1 -p 5432
                timeoutSeconds: 1
                initialDelaySeconds: 30
              env:
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: "${DATABASE_SERVICE_NAME}"
                      key: database-user
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "${DATABASE_SERVICE_NAME}"
                      key: database-password
                - name: POSTGRESQL_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "${DATABASE_SERVICE_NAME}"
                      key: database-admin-password
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: "${DATABASE_SERVICE_NAME}"
                      key: database-name
              resources:
                limits:
                  memory: "${DATABASE_MEMORY_LIMIT}"
              volumeMounts:
                - name: "${DATABASE_SERVICE_NAME}-data"
                  mountPath: "/var/lib/pgsql/data"
              terminationMessagePath: "/dev/termination-log"
              imagePullPolicy: IfNotPresent
              capabilities: {}
              securityContext:
                capabilities: {}
                privileged: false
          volumes:
            - name: "${DATABASE_SERVICE_NAME}-data"
              persistentVolumeClaim:
                claimName: "${DATABASE_SERVICE_NAME}"
          restartPolicy: Always
          dnsPolicy: ClusterFirst
    status: {}

parameters:

  - name: API_SERVICE_NAME
    displayName: Api Service Name
    description: The name of the OpenShift Service exposed for the api.
    required: true
    value: api
  - name: API_SERVICE_ROLE
    displayName: Api Service Role
    description: Api Service Role
    required: true
    value: api
  - name: DATABASE_SERVICE_NAME
    displayName: Database Service Name
    description: The name of the OpenShift Service exposed for the database.
    required: true
    value: postgres
  - name: DATABASE_SERVICE_ROLE
    displayName: Database Service Role
    description: Database Service Role
    required: true
    value: db
  - name: APP_NAME
    displayName: App Name
    description: App Name
    required: true
    value: cass
  - name: API_IMAGE_NAMESPACE
    displayName: Api ImageStream Project
    description: The OpenShift Project where the Api ImageStream resides.
    required: true
    value: apndkr-tools
  - name: API_IMAGE_STREAM
    displayName: Api Image Stream
    description: The name of the API image stream.
    required: true
    value: api
  - name: API_IMAGE_TAG
    displayName: Api Image Tag
    description: The tag of the Api Image that should be deployed
    required: true
    value: dev
  - name: API_DATA_CONTEXTS
    displayName: API Data Contexts
    description:
      The liquibase contexts to include for this environment.  (See [liquibase
      contexts](http://www.liquibase.org/documentation/contexts.html) for more info)
    required: false
    value: prod
  - name: API_DATABASE_SCHEMA
    displayName: API Database Schema
    description: Name of the schema to be used by the Api.
    value: shersched
    required: true
  - name: API_DATABASE_USER
    displayName: API Database User
    description: The name of the database role/user to create for the api.
    required: true
    value: shersched
  - name: API_DATABASE_PASS
    displayName: API Database User Password
    description: The password for the database user to be used by the api.
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true
  - name: API_JWT_SECRET
    displayName: API JWT Secret
    description: The secret used to sign all JWT tokens
    generate: expression
    from: "[a-zA-Z0-9]{100}"
    required: true
  - name: API_MEMORY_LIMIT
    displayName: API Memory Limit
    description: Maximum amount of memory the API container can use.
    value: 512Mi
    required: true
  - name: API_CPU_LIMIT
    displayName: API CPU Limit
    description: Maximum amount of CPU the API container can use.
    value: 500m
    required: false
  - name: DATABASE_MEMORY_LIMIT
    displayName: Database Memory Limit
    description: Maximum amount of memory the Database container can use.
    value: 512Mi
    required: true
  - name: DATABASE_IMAGE_NAMESPACE
    displayName: Namespace
    description: The OpenShift Namespace where the ImageStream resides.
    value: openshift
  - name: DATABASE_DEFAULT_SCHEMA
    displayName: Default database schema
    description: The default schema to use in the database
    value: public
    required: true
  - name: DATABASE_EXTENSIONS_SCHEMA
    displayName: Database Extensions Schema
    description: Name of the schema to be used for database extensions.
    value: extensions
    required: true
  - name: POSTGRESQL_USER
    displayName: PostgreSQL Connection Username
    description: Username for PostgreSQL user that will be used for accessing the database.
    generate: expression
    from: user[A-Z0-9]{3}
    required: true
  - name: POSTGRESQL_PASSWORD
    displayName: PostgreSQL Connection Password
    description: Password for the PostgreSQL connection user.
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true
  - name: POSTGRESQL_ADMIN_PASSWORD
    displayName: PostgreSQL Admin Password
    description: Password for the PostgreSQL postgres account.
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true
  - name: POSTGRESQL_DATABASE
    displayName: PostgreSQL Database Name
    description: Name of the PostgreSQL database accessed.
    value: appdb
    required: true
  - name: VOLUME_CAPACITY
    displayName: Volume Capacity
    description: Volume space available for data, e.g. 512Mi, 2Gi.
    value: 1Gi
    required: true
  - name: POSTGRESQL_VERSION
    displayName: Version of PostgreSQL Image
    description: Version of PostgreSQL image to be used (9.4, 9.5 or latest).
    value: "9.5"
    required: true
